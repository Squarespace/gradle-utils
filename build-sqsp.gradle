plugins {
  id 'net.researchgate.release' version '2.3.4'
}

group = "com.squarespace.de.kotka.gradle"

description = "A set of utilities to ease the life of gradle plugin developers"

ext.kotka = [
  repository: "kotkade/gradle-utils",
  wrapperVersion: "2.12"
]

apply plugin: "groovy"
apply plugin: 'signing'
apply plugin: 'maven'

sourceSets {
  macros {
    compileClasspath = project.sourceSets.main.compileClasspath
  }
}

compileMacrosGroovy {
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
}

compileGroovy {
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'

  classpath = classpath.plus project.sourceSets.macros.output
}

compileTestGroovy {
  classpath = classpath.plus project.sourceSets.macros.output
}

test {
  classpath = classpath.plus project.sourceSets.macros.output
}

repositories {
  mavenCentral()
  maven { url "http://clojars.org/repo" }
}

dependencies {
  compile localGroovy()
  compile gradleApi()

  compile "de.kotka.groovy:zweig:0.4.0"

  testCompile 'org.codehaus.groovy:groovy-all:2.4.4'
  testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
      exclude group: 'org.codehaus.groovy', module: 'groovy-all'
  }
  testCompile 'com.github.goldin:spock-extensions:0.1.4'
}

jar {
  from project.sourceSets.macros.output
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from project.sourceSets.macros.allSource
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives jar
  archives sourcesJar
  archives javadocJar
}

signing {
  required { gradle.taskGraph.hasTask('uploadArchives') }
  sign configurations.archives
}

// NOTE: The 'RELEASE_REPOSITORY_URL', 'MAVEN_CENTRAL_USERNAME' 
//       and 'MAVEN_CENTRAL_PASSWORD' values are stored in the 
//       ~/.gradle/gradle.properties file.
      
task uploadArchivesSqsp(type: Upload) {
  configuration = configurations.archives
  
  repositories {
    mavenDeployer {
      if (project.hasProperty('RELEASE_REPOSITORY_URL') 
          && project.hasProperty('SNAPSHOT_REPOSITORY_URL')) {
          
        repository(url: RELEASE_REPOSITORY_URL)
        snapshotRepository(url: SNAPSHOT_REPOSITORY_URL)
        
      } else {
        logger.error("RELEASE_REPOSITORY_URL and/or SNAPSHOT_REPOSITORY_URL missing.")
      }
    }
  }
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
      
      if (project.hasProperty('MAVEN_CENTRAL_USERNAME') 
          && project.hasProperty('MAVEN_CENTRAL_PASSWORD')) {
        
        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
          authentication(userName: MAVEN_CENTRAL_USERNAME, password: MAVEN_CENTRAL_PASSWORD)
        }
  
        snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
          authentication(userName: MAVEN_CENTRAL_USERNAME, password: MAVEN_CENTRAL_PASSWORD)
        }
      } else {
        logger.error("MAVEN_CENTRAL_USERNAME and/or MAVEN_CENTRAL_PASSWORD missing.")
      }
    }
  }
}

release {
  git {
    requireBranch = 'rkapsi/fix-gradle-212'
  }
  
  failOnUpdateNeeded = false
  failOnSnapshotDependencies = false
}

createReleaseTag.dependsOn ':uploadArchives' ':uploadArchivesSqsp'
